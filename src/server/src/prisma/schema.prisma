// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Room {
  id       String @id @default(cuid())
  adminKey String
  name     String

  // Short id having short join URLs
  shortId String @unique

  createdAt DateTime  @default(now())
  closedAt  DateTime?

  users     RoomUser[]
  questions Question[]
}

model RoomUser {
  id           String       @id @default(cuid())
  studentEmail String
  location     UserLocation
  state        WaitingState

  roomId String
  room   Room?  @relation(fields: [roomId], references: [id])

  voterId String? @unique
  voter   Voter?  @relation(fields: [voterId], references: [id])
}

model Voter {
  id    String          @id @default(cuid())
  votes CandidateVote[]

  user         RoomUser?
  interactions QuestionInteraction[]
}

model Question {
  id         String              @id @default(cuid())
  question   String
  format     QuestionType
  candidates QuestionCandidate[]

  votersPresentAtEnd Int @default(0)

  roomId String
  room   Room?  @relation(fields: [roomId], references: [id])

  createdAt    DateTime              @default(now())
  closed       Boolean               @default(false)
  interactions QuestionInteraction[]
}

model QuestionCandidate {
  id    String          @id @default(cuid())
  name  String
  votes CandidateVote[]

  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?
}

// A model to track how many people interacted with the question, even if they abstained their vote
model QuestionInteraction {
  questionId String
  question   Question @relation(fields: [questionId], references: [id])

  voterId String
  voter   Voter  @relation(fields: [voterId], references: [id])

  @@id([questionId, voterId])
}

model CandidateVote {
  candidateId String
  candidate   QuestionCandidate @relation(fields: [candidateId], references: [id])

  voterId String
  voter   Voter  @relation(fields: [voterId], references: [id])

  @@id([candidateId, voterId])
}

enum UserLocation {
  InPerson
  Online
}

enum WaitingState {
  Waiting
  Admitted
  Declined
  Kicked
}

enum QuestionType {
  SingleVote
}
